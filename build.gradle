/*
 * Gradle build file for the RM Superpeer. Generated initially with
 * gradle 4.1 and the init command.
 * 
 * Uses a git plugin to checkout the Ethereum Parity Client vagrant
 * setup. Uses a plugin to execute the ethereum parity vagrant using
 * vagrant up. Parity client will be setup to listen on 
 * http://localhost:8545 so that the Superpeer can relay ethereum
 * remote signed transaction into it to be executed on the ethereum
 * blockchain. Should be configured to use either the Kovan testnet
 * or the public ethereum network.
 *
 * Requirements: git, vagrant 2.0.1 or higher, virtualbox
 * Note: if parity comes up correctly, you should be able to test it correctly
 * outside of the VM as follows: curl --data '{"method":"eth_accounts","params":[],"id":1,"jsonrpc":"2.0"}' -H "Content-Type: application/json" -X POST localhost:8545'
 * and you shouldn't get an error about connections.
 */
import com.bmuschko.gradle.vagrant.tasks.Vagrant
import com.bmuschko.gradle.vagrant.tasks.VagrantUp
import com.bmuschko.gradle.vagrant.tasks.VagrantSsh
import com.bmuschko.gradle.vagrant.tasks.VagrantDestroy

// Apply the java plugin to add support for Java
apply plugin: 'java'

// Apply the application plugin to add support for building an application
apply plugin: 'application'

applicationDefaultJvmArgs = ["-noverify"]
buildscript {
    ext {
        virtualBoxDir = file('build/parity')
        artifactory_app_username = "insertyourusername"
        artifactory_app_password = "insertyourpasswordhash"
        artifactory_app_key = "insertyourkey"
    }
    repositories {
        mavenCentral()
        jcenter()
        maven {
            url "http://research.rightmesh.io/artifactory/libs-local"
            credentials {
                username artifactory_app_username
                password artifactory_app_password
            }
        }
    }
    dependencies {
        classpath 'io.left.rightmesh:rightmesh-plugin:1.4'
        classpath 'com.palominolabs.gradle.task:gradle-git-clone-task:0.0.2'
        classpath 'com.bmuschko:gradle-vagrant-plugin:2.1'
    }
}
apply plugin: 'io.left.rightmesh.rightmesh-plugin'
build.dependsOn("rightmesh")

repositories {
    mavenCentral()
    jcenter()
    maven {
        url "http://research.rightmesh.io/artifactory/libs-local"
        credentials {
            username artifactory_app_username
            password artifactory_app_password
        }
    }
}

dependencies {
    // This dependency is found on compile classpath of this component and consumers.
    compile 'com.google.guava:guava:23.0'
    compile ('io.left.rightmesh:rightmesh-java-library:0.5.0-JASON-SNAPSHOT') { changing = true; }
    // Use JUnit test framework
    testCompile 'junit:junit:4.12'
}

//Sets the repo we will pull the parity vagrant setup from. Also specifies
//the commit hash, or remote branch with some like 'origin/master'
task cloneParity(type: com.palominolabs.gradle.task.git.clone.GitCloneTask) {
  dir = file("$buildDir/parity")
  uri = 'https://github.com/RightMesh/vagrant-eth-env.git'
  treeish = 'c1b27375a9c11a718bdaae7aad4769e5bdd19cc9r'
}

task cloneStatus {
    doLast {
        if (cloneParity.state.failure != null) {
            //here is what should be executed if cloneParity fails
            println 'Failed to use ssh to connect to gitlab. Setup your ssh key and test with `ssh -T git@github.com`. More instructions at https://help.github.com/articles/adding-a-new-ssh-key-to-your-github-account/'
        }
    }
}

// creates and starts a parity VM
task startParity(type: VagrantUp) {
    description = 'Starts VM machine running on VirtualBox.'
    group = 'VirtualBox VM'
    boxDir = virtualBoxDir
}

// stops and destroys the vagrant VM for parity
task destroyParity(type: VagrantDestroy ) {
    description = 'Destroys VM machine running on VirtualBox.'
    group = 'VirtualBox VM'
    boxDir = virtualBoxDir
}

// will destory the old parity and attempt to create and start a new
// one - should be used if something totally borks up
task refreshParity {
    doFirst {
        destroyParity
    }
    finalizedBy {
        startParity
    }
}

// Define the main class for the application
mainClassName = 'SuperPeer'

cloneParity.finalizedBy cloneStatus

startParity.dependsOn(cloneParity)
compileJava.dependsOn(startParity)

// for testing
configurations.all {
    // Check for updates every build
    resolutionStrategy.cacheChangingModulesFor 0, 'seconds'
}


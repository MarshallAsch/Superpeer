/*
 * This Java source file was generated by the Gradle 'init' task.
 */
import ether.TransactionsManager;
import io.left.rightmesh.id.MeshID;
import io.left.rightmesh.mesh.JavaMeshManager;
import io.left.rightmesh.mesh.MeshManager;
import io.left.rightmesh.mesh.MeshStateListener;
import io.left.rightmesh.util.RightMeshException;
import io.reactivex.functions.Consumer;

import java.io.BufferedReader;
import java.io.IOException;
import java.io.InputStreamReader;

import static io.left.rightmesh.mesh.MeshManager.PEER_CHANGED;
import static io.left.rightmesh.mesh.MeshManager.TRANSACTION_RECEIVED;

public class SuperPeer implements MeshStateListener {

    //TODO: Add logger instead of system.out
    public static final String TAG = SuperPeer.class.getCanonicalName();

    private boolean isRunning = true;
    private TransactionsManager tm;

    public static void main(String[] args) {
        SuperPeer p = new SuperPeer();
    }

    public SuperPeer() {
        JavaMeshManager mm = new JavaMeshManager(true);
        System.out.println("Superpeer MeshID: " + mm.getUuid());

        System.out.println("Waiting for lib to be ready");
        try {
            Thread.sleep(200);
        } catch (Exception ex) {
        }

        tm = TransactionsManager.getInstance(mm);
        tm.start();

        String msg;
        BufferedReader br = new BufferedReader(new InputStreamReader(System.in));

        do {
            try {
                msg = br.readLine();
                processInput(msg);
            } catch (IOException e) {
                e.printStackTrace();
                break;
            }
        } while (isRunning);

        tm.stop();
        mm.stop();
    }

    public void meshStateChanged(MeshID meshID, int state) {

        if (state == MeshStateListener.SUCCESS) {
            tm.start();
        }
    }

    private void processInput(String msg) {
        if(msg.equals("exit")) {
            isRunning = false;
            return;
        }

        String[] args = msg.split(" ");
        if(args.length == 0) {
            return;
        }

        switch (args[0]) {
            case "close":
                processCloseCmd(args);
                break;

            default:
                System.out.println("Invalid command.");
                break;
        }
    }

    private void processCloseCmd(String[] args) {
        if(args.length != 2) {
            System.out.println("Invalid args.");
            return;
        }

        tm.closeChannels(args[1]);
    }
}
